name: Continuous Integration

on: [push, pull_request]

env:
    LLVM_VERSION: 10.0.0
    CMAKE_VERSION: 3.16.6
    NINJA_VERSION: 1.10.0
    GLFW_VERSION: 3.3.2

jobs:
    build:
        name: "[${{ matrix.cfg.os }}] ${{ matrix.cfg.name }} ${{ matrix.build_type }}"
        runs-on: ${{ matrix.cfg.os }}

        strategy:
            fail-fast: false
            matrix:
                build_type: [Debug, Release]#, RelWithDebInfo, MinSizeRel]
                cfg:
                    - { name: MSVC,  os: windows-latest, cc: cl,    cxx: cl }
                    - { name: GNU,   os: windows-latest, cc: gcc,   cxx: g++ }
                    - { name: Clang, os: windows-latest, cc: clang, cxx: clang++ }
                    - { name: GNU,   os: ubuntu-latest,  cc: gcc-9, cxx: g++-9 }
                    - { name: Clang, os: ubuntu-latest,  cc: clang, cxx: clang++ }
                    - { name: GNU,   os: macos-latest,   cc: gcc,   cxx: g++ }
                    - { name: Clang, os: macos-latest,   cc: clang, cxx: clang++ }

        steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-python@v1
          with:
            python-version: '3.x'
            architecture: 'x64'
        - name: Set up system
          # id: system_setup
          # if: runner.os == 'Linux'
          shell: bash
          run: |
            if [ "${{ runner.os }}" == "Windows" ]; then
                llvm_url="https://ziglang.org/deps/llvm%2bclang%2blld-$LLVM_VERSION-x86_64-windows-msvc-release-mt.tar.xz"
                cmake_url="https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-win64-x64.zip"
                ninja_url="https://github.com/ninja-build/ninja/releases/download/v$NINJA_VERSION/ninja-win.zip"
                glfw_url="https://github.com/glfw/glfw/releases/download/$GLFW_VERSION/glfw-$GLFW_VERSION.bin.WIN64.zip"
            elif [ "${{ runner.os }}" == "Linux" ]; then
                sudo apt update -y
                sudo apt install -y libglfw3-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
                llvm_url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VERSION/clang+llvm-$LLVM_VERSION-x86_64-linux-gnu-ubuntu-18.04.tar.xz"
                cmake_url="https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz"
                ninja_url="https://github.com/ninja-build/ninja/releases/download/v$NINJA_VERSION/ninja-linux.zip"
                glfw_url="https://github.com/glfw/glfw/releases/download/$GLFW_VERSION/glfw-$GLFW_VERSION.zip"
            elif [ "${{ runner.os }}" == "macOS" ]; then
                llvm_url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VERSION/clang+llvm-$LLVM_VERSION-x86_64-apple-darwin.tar.xz"
                cmake_url="https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Darwin-x86_64.tar.gz"
                ninja_url="https://github.com/ninja-build/ninja/releases/download/v$NINJA_VERSION/ninja-mac.zip"
                glfw_url="https://github.com/glfw/glfw/releases/download/$GLFW_VERSION/glfw-$GLFW_VERSION.bin.MACOS.zip"
            fi
            cmake -P /dev/stdin <<< "file(DOWNLOAD $llvm_url ./llvm.zip SHOW_PROGRESS)"
            cmake -P /dev/stdin <<< "file(DOWNLOAD $cmake_url ./cmake.zip SHOW_PROGRESS)"
            cmake -P /dev/stdin <<< "file(DOWNLOAD $ninja_url ./ninja.zip SHOW_PROGRESS)"
            cmake -P /dev/stdin <<< "file(DOWNLOAD $glfw_url ./glfw.zip SHOW_PROGRESS)"
            cmake -E tar xvf llvm.zip
            cmake -E tar xvf cmake.zip
            cmake -E tar xvf ninja.zip
            cmake -E tar xvf glfw.zip
            echo "::add-path::$PWD"
            if [ "${{ runner.os }}" == "Windows" ]; then
                echo "::add-path::$PWD/llvm+clang+lld-$LLVM_VERSION-x86_64-windows-msvc-release-mt/bin"
                echo "::add-path::$PWD/cmake-$CMAKE_VERSION-win64-x64/bin"
            elif [ "${{ runner.os }}" == "Linux" ]; then
                echo "::add-path::$PWD/clang+llvm-$LLVM_VERSION-x86_64-linux-gnu-ubuntu-18.04/bin"
                echo "::add-path::$PWD/cmake-$CMAKE_VERSION-Linux-x86_64/bin"
            elif [ "${{ runner.os }}" == "macOS" ]; then
                echo "::add-path::$PWD/clang+llvm-$LLVM_VERSION-x86_64-apple-darwin/bin"
                echo "::add-path::$PWD/cmake-$CMAKE_VERSION-Darwin-x86_64/CMake.app/Contents/bin"
            fi
            if [ "${{ runner.os }}" != "Windows" ]; then
                chmod +x ninja
            fi
            python -m pip install --upgrade pip
            pip install pyyaml beautysh cmake-format
        - name: Software versions
          shell: bash
          run: |
            echo "clang-format"
            clang-format --version
            echo "clang-tidy"
            clang-tidy --version
            echo "clang-apply-replacements"
            clang-apply-replacements --version
            echo "cmake"
            cmake --version
            echo "ctest"
            ctest --version
            echo "ninja"
            ninja --version
            echo "beautysh"
            beautysh --version
            echo "cmake-format"
            cmake-format --version
        - name: Configure build
          shell: bash
          run: |
            cmake -G"Ninja" -S. -Bbuild -DCMAKE_C_COMPILER=${{ matrix.cfg.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.cfg.cxx }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
            ln -sf build/compile_commands.json .
        - name: Check shell formatting
          shell: bash
          working-directory: ./utils
          run: |
            ./beautysh.bash check
        - name: Check build formatting
          shell: bash
          working-directory: ./utils
          run: |
            ./cmake-format.bash check
        - name: Check include guards
          shell: bash
          working-directory: ./utils
          run: |
            ./include-guards.bash check
        - name: Check test cases
          shell: bash
          working-directory: ./utils
          run: |
            ./test-cases.bash check
        - name: Check code formatting
          shell: bash
          working-directory: ./utils
          run: |
            ./clang-format.bash check
        - name: Check static analysis
          shell: bash
          working-directory: ./utils
          run: |
            ./clang-tidy.bash check
        - name: Run build
          shell: bash
          working-directory: ./build
          run: |
            cmake --build .
        - name: Run tests
          shell: bash
          working-directory: ./build
          run: |
            ctest -VV --timeout 30 -E "pkg-config"
