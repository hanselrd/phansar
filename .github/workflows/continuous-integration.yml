name: Continuous Integration

on: [push, pull_request]

env:
    CMAKE_GENERATOR: Ninja
    GCC_VERSION: 10
    LLVM_VERSION: 10

jobs:
    build:
        name: ${{ matrix.name }}
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                name: [
                    windows-latest-cl,
                    # windows-latest-clang-cl,
                    # windows-latest-clang,
                    # windows-latest-gcc,
                    ubuntu-latest-gcc,
                    ubuntu-latest-clang,
                    macos-latest-clang,
                    # macos-latest-gcc
                ]

                include:
                    - name: windows-latest-cl
                      os: windows-latest
                      compiler: cl

                    # - name: windows-latest-clang-cl
                    #   os: windows-latest
                    #   compiler: clang-cl

                    # - name: windows-latest-clang
                    #   os: windows-latest
                    #   compiler: clang

                    # - name: windows-latest-gcc
                    #   os: windows-latest
                    #   compiler: gcc

                    - name: ubuntu-latest-gcc
                      os: ubuntu-latest
                      compiler: gcc

                    - name: ubuntu-latest-clang
                      os: ubuntu-latest
                      compiler: clang

                    - name: macos-latest-clang
                      os: macos-latest
                      compiler: clang

                    # - name: macos-latest-gcc
                    #   os: macos-latest
                    #   compiler: gcc

        steps:
        - uses: actions/checkout@v2

        - uses: actions/setup-python@v1
          with:
            python-version: '3.x'
            architecture: 'x64'

        - name: Install
          shell: bash
          run: |
              python -m pip install --upgrade pip
              pip install pipenv cmake pyyaml cmakelang black

        - name: Install (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          run: |
              Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
              scoop install ninja llvm postgresql --global

              if ("${{ matrix.compiler }}" -eq "gcc") {
                  scoop install gcc --global
                  echo "::set-env name=CC::gcc"
                  echo "::set-env name=CXX::g++"
              } elseif ("${{ matrix.compiler }}" -eq "clang") {
                  echo "::set-env name=CC::clang"
                  echo "::set-env name=CXX::clang++"
              } else {
                  echo "::set-env name=CC::${{ matrix.compiler }}"
                  echo "::set-env name=CXX::${{ matrix.compiler }}"
              }

              echo "::set-env name=PATH::$env:PATH"

        - name: Install (Linux)
          if: runner.os == 'Linux'
          shell: bash
          run: |
              sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 15CF4D18AF4F742
              sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-$LLVM_VERSION main"

              sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
              wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

              sudo apt-get update -y

              sudo apt-get install -y ninja-build clang-tools-$LLVM_VERSION clang-format-$LLVM_VERSION clang-tidy-$LLVM_VERSION libglfw3-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev postgresql

              if [ "${{ matrix.compiler }}" == "gcc" ]; then
                  sudo apt-get install -y g++-$GCC_VERSION
                  echo "::set-env name=CC::gcc-$GCC_VERSION"
                  echo "::set-env name=CXX::g++-$GCC_VERSION"
              elif [ "${{ matrix.compiler }}" == "clang" ]; then
                  sudo apt-get install -y clang-$LLVM_VERSION
                  echo "::set-env name=CC::clang-$LLVM_VERSION"
                  echo "::set-env name=CXX::clang++-$LLVM_VERSION"
              fi

        - name: Install (macOS)
          if: runner.os == 'macOS'
          shell: bash
          run: |
              brew install ninja llvm@$LLVM_VERSION postgresql

              # echo "::add-path::/usr/local/opt/llvm@$LLVM_VERSION/bin"
              echo "::set-env name=PATH::$PATH:/usr/local/opt/llvm@$LLVM_VERSION/bin"

              if [ "${{ matrix.compiler }}" == "gcc" ]; then
                  brew install gcc@$GCC_VERSION
                  echo "::set-env name=CC::gcc-$GCC_VERSION"
                  echo "::set-env name=CXX::g++-$GCC_VERSION"
              elif [ "${{ matrix.compiler }}" == "clang" ]; then
                  echo "::set-env name=CC::clang"
                  echo "::set-env name=CXX::clang++"
              fi

        - name: Configure (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          run: |
              .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

        - name: Check formatting
          shell: bash
          run: |
              cmake -E rm -rf build
              cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DENABLE_CMAKE_FORMAT=ON -DENABLE_BLACK=ON -DENABLE_CLANG_FORMAT=ON -DENABLE_CLANG_TIDY=ON
              cmake -E copy build/compile_commands.json .

              if [ "${{ runner.os }}" != "Windows" ]; then
                  cmake --build build --target check-cmake-format
              fi

              cmake --build build --target check-black

              if [ "${{ runner.os }}" == "macOS" ]; then
                  cmake --build build --target check-clang-format
                  cmake --build build --target check-clang-tidy
              fi

        - name: Build and test Debug
          shell: bash
          run: |
              cmake -E rm -rf build
              cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
              cmake --build build
              cd build
              ctest -VV --timeout 30 -E "pkg-config"

        - name: Build and test Release
          shell: bash
          run: |
              cmake -E rm -rf build
              cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
              cmake --build build
              cd build
              ctest -VV --timeout 30 -E "pkg-config"

        - name: Build and test RelWithDebInfo
          shell: bash
          run: |
              cmake -E rm -rf build
              cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo
              cmake --build build
              cd build
              ctest -VV --timeout 30 -E "pkg-config"

        - name: Build and test MinSizeRel
          shell: bash
          run: |
              cmake -E rm -rf build
              cmake -S . -B build -DCMAKE_BUILD_TYPE=MinSizeRel
              cmake --build build
              cd build
              ctest -VV --timeout 30 -E "pkg-config"
