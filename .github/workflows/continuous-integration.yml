name: Continuous Integration

on: [push, pull_request]

env:
    CMAKE_VERSION: 3.16.6
    NINJA_VERSION: 1.10.0
    GLFW_VERSION: 3.3.2

jobs:
    build:
        name: "${{ matrix.os }} ${{ matrix.compiler }} ${{ matrix.build_type }}"
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                os: [windows-latest, ubuntu-latest, macos-latest]
                compiler: [MSVC, GNU, Clang]
                build_type: [Debug, Release, RelWithDebInfo, MinSizeRel]
                exclude:
                    - { os: ubuntu-latest, compiler: MSVC, build_type: Debug }
                    - { os: ubuntu-latest, compiler: MSVC, build_type: Release }
                    - { os: ubuntu-latest, compiler: MSVC, build_type: RelWithDebInfo }
                    - { os: ubuntu-latest, compiler: MSVC, build_type: MinSizeRel }
                    - { os: macos-latest, compiler: MSVC, build_type: Debug }
                    - { os: macos-latest, compiler: MSVC, build_type: Release }
                    - { os: macos-latest, compiler: MSVC, build_type: RelWithDebInfo }
                    - { os: macos-latest, compiler: MSVC, build_type: MinSizeRel }

        steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-python@v1
          with:
            python-version: '3.x'
            architecture: 'x64'
        - name: Set up system
          if: runner.os == 'Linux'
          shell: bash
          run: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt update
            sudo apt install -y wget build-essential cmake ninja-build gcc-9 g++-9
            python -m pip install --upgrade pip
            pip install pyyaml beautysh cmake-format
            wget "https://releases.llvm.org/9.0.0/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz"
            tar xf clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz
            sudo cp -R ./clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04/* /usr/local
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
            sudo apt install -y libglfw3-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
        - name: Configure build
          if: matrix.compiler == 'MSVC'
          shell: bash
          run: |
            cmake -G"Ninja" -H. -Bbuild -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
            ln -sf build/compile_commands.json .
        - name: Configure build
          if: matrix.compiler == 'GNU'
          shell: bash
          run: |
            cmake -G"Ninja" -H. -Bbuild -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
            ln -sf build/compile_commands.json .
        - name: Configure build
          if: matrix.compiler == 'Clang'
          shell: bash
          run: |
            cmake -G"Ninja" -H. -Bbuild -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
            ln -sf build/compile_commands.json .
        - name: Check shell formatting
          shell: bash
          working-directory: ./utils
          run: |
            ./beautysh.bash check
        - name: Check build formatting
          shell: bash
          working-directory: ./utils
          run: |
            ./cmake-format.bash check
        - name: Check include guards
          shell: bash
          working-directory: ./utils
          run: |
            ./include-guards.bash check
        - name: Check test cases
          shell: bash
          working-directory: ./utils
          run: |
            ./test-cases.bash check
        - name: Check code formatting
          shell: bash
          working-directory: ./utils
          run: |
            ./clang-format.bash check
        - name: Check static analysis
          shell: bash
          working-directory: ./utils
          run: |
            ./clang-tidy.bash check
        - name: Run build
          shell: bash
          working-directory: ./build
          run: |
            cmake --build .
        - name: Run tests
          shell: bash
          working-directory: ./build
          run: |
            ctest -VV --timeout 30 -E "pkg-config"
