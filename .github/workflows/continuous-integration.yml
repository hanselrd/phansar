name: Continuous Integration

on: [push, pull_request]

env:
    CMAKE_GENERATOR: Ninja
    GCC_VERSION: 9
    CLANG_VERSION: 9
    XCODE_VERSION: 11.3

jobs:
    build:
        name: ${{ matrix.name }}
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                name: [
                    windows-latest-cl,
                    windows-latest-clang-cl,
                    windows-latest-clang,
                    windows-latest-gcc,
                    ubuntu-latest-gcc,
                    ubuntu-latest-clang,
                    macos-latest-clang,
                    macos-latest-gcc
                ]

                include:
                    - name: windows-latest-cl
                      os: windows-latest
                      compiler: cl

                    - name: windows-latest-clang-cl
                      os: windows-latest
                      compiler: clang-cl

                    - name: windows-latest-clang
                      os: windows-latest
                      compiler: clang

                    - name: windows-latest-gcc
                      os: windows-latest
                      compiler: gcc

                    - name: ubuntu-latest-gcc
                      os: ubuntu-latest
                      compiler: gcc

                    - name: ubuntu-latest-clang
                      os: ubuntu-latest
                      compiler: clang

                    - name: macos-latest-clang
                      os: macos-latest
                      compiler: clang

                    - name: macos-latest-gcc
                      os: macos-latest
                      compiler: gcc

        steps:
        - uses: actions/checkout@v2

        - uses: actions/setup-python@v1
          with:
            python-version: '3.x'
            architecture: 'x64'

        - name: Install
          shell: bash
          run: |
              python -m pip install --upgrade pip
              pip install pipenv cmake pyyaml cmake-format black
              pipenv install

        - name: Install (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          run: |
              Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
              scoop install ninja llvm --global

              if ("${{ matrix.compiler }}" -eq "gcc") {
                  scoop install gcc --global
                  echo "::set-env name=CC::gcc"
                  echo "::set-env name=CXX::g++"
              } elseif ("${{ matrix.compiler }}" -eq "clang") {
                  echo "::set-env name=CC::clang"
                  echo "::set-env name=CXX::clang++"
              } else {
                  echo "::set-env name=CC::${{ matrix.compiler }}"
                  echo "::set-env name=CXX::${{ matrix.compiler }}"
              }

              echo "::set-env name=PATH::$env:PATH"

        - name: Install (Linux)
          if: runner.os == 'Linux'
          shell: bash
          run: |
              sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-$CLANG_VERSION main"

              sudo apt-get update -y

              sudo apt-get install -y ninja-build clang-tools-$CLANG_VERSION clang-format-$CLANG_VERSION clang-tidy-$CLANG_VERSION

              if [ "${{ matrix.compiler }}" == "gcc" ]; then
                  sudo apt-get install -y g++-$GCC_VERSION
                  echo "::set-env name=CC::gcc-$GCC_VERSION"
                  echo "::set-env name=CXX::g++-$GCC_VERSION"
              elif [ "${{ matrix.compiler }}" == "clang" ]; then
                  sudo apt-get install -y clang-$CLANG_VERSION
                  echo "::set-env name=CC::clang-$CLANG_VERSION"
                  echo "::set-env name=CXX::clang++-$CLANG_VERSION"
              fi

        - name: Install (macOS)
          if: runner.os == 'macOS'
          shell: bash
          run: |
              brew install ninja llvm@$CLANG_VERSION

              if [ "${{ matrix.compiler }}" == "gcc" ]; then
                  brew install gcc@$GCC_VERSION
                  echo "::set-env name=CC::gcc-$GCC_VERSION"
                  echo "::set-env name=CXX::g++-$GCC_VERSION"
              elif [ "${{ matrix.compiler }}" == "clang" ]; then
                  ls -ls /Applications/
                  sudo xcode-select -switch /Applications/Xcode_$XCODE_VERSION.app
                  echo "::set-env name=CC::clang"
                  echo "::set-env name=CXX::clang++"
              fi

        - name: Configure (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          run: |
              .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

        - name: Build and test Debug
          shell: bash
          run: |
              cmake -E rm -rf build
              cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
              cmake --build build
              cd build
              ctest -VV --timeout 30 -E "pkg-config"

        - name: Build and test Release
          shell: bash
          run: |
              cmake -E rm -rf build
              cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
              cmake --build build
              cd build
              ctest -VV --timeout 30 -E "pkg-config"
